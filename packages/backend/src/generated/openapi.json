{
  "openapi": "3.1.0",
  "info": {
    "title": "Atode API",
    "description": "A comprehensive todo application API with hierarchical projects and tasks, built with Hono, PostgreSQL, and Drizzle ORM",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "health",
      "description": "Health check operations"
    },
    {
      "name": "auth",
      "description": "Authentication operations"
    },
    {
      "name": "tasks",
      "description": "Task management operations"
    },
    {
      "name": "projects",
      "description": "Project management operations"
    },
    {
      "name": "labels",
      "description": "Label management operations"
    },
    {
      "name": "comments",
      "description": "Comment management operations"
    }
  ],
  "paths": {
    "/api/health": {
      "get": {
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "const": "ok"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  },
                  "required": ["status", "timestamp", "version"]
                }
              }
            }
          }
        },
        "operationId": "getApiHealth",
        "tags": ["health"],
        "parameters": [],
        "description": "Health check endpoint"
      }
    },
    "/api/tasks": {
      "get": {
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "getApiTasks",
        "tags": ["tasks"],
        "parameters": [
          {
            "in": "query",
            "name": "#/components/schemas/TaskFilter",
            "schema": {
              "$ref": "#/components/schemas/TaskFilter"
            }
          }
        ],
        "summary": "List tasks",
        "description": "Get a paginated list of tasks with optional filtering"
      },
      "post": {
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "postApiTasks",
        "tags": ["tasks"],
        "parameters": [],
        "summary": "Create task",
        "description": "Create a new task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTask"
              }
            }
          }
        }
      }
    },
    "/api/tasks/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "getApiTasksById",
        "tags": ["tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/IdParam"
            },
            "required": true
          }
        ],
        "summary": "Get task",
        "description": "Get a specific task by ID"
      },
      "put": {
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "putApiTasksById",
        "tags": ["tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/IdParam"
            },
            "required": true
          }
        ],
        "summary": "Update task",
        "description": "Update an existing task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            }
          }
        }
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Task deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "deleteApiTasksById",
        "tags": ["tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/IdParam"
            },
            "required": true
          }
        ],
        "summary": "Delete task",
        "description": "Soft delete a task"
      }
    },
    "/api/tasks/{id}/complete": {
      "post": {
        "responses": {
          "200": {
            "description": "Task completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "postApiTasksByIdComplete",
        "tags": ["tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/IdParam"
            },
            "required": true
          }
        ],
        "summary": "Complete task",
        "description": "Mark a task as completed"
      }
    },
    "/api/projects": {
      "get": {
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "success"]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "getApiProjects",
        "tags": ["projects"],
        "parameters": [
          {
            "in": "query",
            "name": "#/components/schemas/ProjectFilter",
            "schema": {
              "$ref": "#/components/schemas/ProjectFilter"
            }
          }
        ],
        "summary": "List projects",
        "description": "Get a list of user projects with optional filtering"
      },
      "post": {
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "postApiProjects",
        "tags": ["projects"],
        "parameters": [],
        "summary": "Create project",
        "description": "Create a new project",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProject"
              }
            }
          }
        }
      }
    },
    "/api/projects/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Project details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "getApiProjectsById",
        "tags": ["projects"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/IdParam"
            },
            "required": true
          }
        ],
        "summary": "Get project",
        "description": "Get a specific project by ID"
      },
      "put": {
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "putApiProjectsById",
        "tags": ["projects"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/IdParam"
            },
            "required": true
          }
        ],
        "summary": "Update project",
        "description": "Update an existing project",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProject"
              }
            }
          }
        }
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Project deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "deleteApiProjectsById",
        "tags": ["projects"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/IdParam"
            },
            "required": true
          }
        ],
        "summary": "Delete project",
        "description": "Soft delete a project"
      }
    },
    "/api/projects/{id}/children": {
      "get": {
        "responses": {
          "200": {
            "description": "List of child projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    },
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": ["data", "success"]
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        },
        "operationId": "getApiProjectsByIdChildren",
        "tags": ["projects"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "$ref": "#/components/schemas/IdParam"
            },
            "required": true
          }
        ],
        "summary": "Get child projects",
        "description": "Get all child projects of a specific project"
      }
    },
    "/api/auth/signin": {
      "get": {
        "summary": "Display sign-in page",
        "description": "Displays the built-in/unbranded sign-in page",
        "tags": ["auth"],
        "responses": {
          "200": {
            "description": "Sign-in page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/signin/github": {
      "post": {
        "summary": "Sign in with GitHub",
        "description": "Starts a GitHub OAuth sign-in flow. Requires CSRF token.",
        "tags": ["auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "csrfToken": {
                    "type": "string",
                    "description": "CSRF token from /api/auth/csrf"
                  },
                  "callbackUrl": {
                    "type": "string",
                    "description": "URL to redirect to after sign-in"
                  }
                },
                "required": ["csrfToken"]
              }
            }
          }
        },
        "responses": {
          "302": {
            "description": "Redirect to GitHub OAuth authorization"
          },
          "400": {
            "description": "Invalid request or missing CSRF token"
          }
        }
      }
    },
    "/api/auth/callback/github": {
      "get": {
        "summary": "GitHub OAuth callback",
        "description": "Handles OAuth callback from GitHub",
        "tags": ["auth"],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization code from GitHub"
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "State parameter for CSRF protection"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect after successful authentication"
          },
          "400": {
            "description": "Invalid callback parameters"
          }
        }
      },
      "post": {
        "summary": "GitHub OAuth callback (POST)",
        "description": "Handles OAuth callback from GitHub via POST",
        "tags": ["auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Authorization code from GitHub"
                  },
                  "state": {
                    "type": "string",
                    "description": "State parameter for CSRF protection"
                  }
                },
                "required": ["code", "state"]
              }
            }
          }
        },
        "responses": {
          "302": {
            "description": "Redirect after successful authentication"
          },
          "400": {
            "description": "Invalid callback parameters"
          }
        }
      }
    },
    "/api/auth/signout": {
      "get": {
        "summary": "Display sign-out page",
        "description": "Displays the built-in/unbranded sign-out page",
        "tags": ["auth"],
        "responses": {
          "200": {
            "description": "Sign-out page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Sign out",
        "description": "Signs the user out and invalidates the session. Requires CSRF token.",
        "tags": ["auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "csrfToken": {
                    "type": "string",
                    "description": "CSRF token from /api/auth/csrf"
                  },
                  "callbackUrl": {
                    "type": "string",
                    "description": "URL to redirect to after sign-out"
                  }
                },
                "required": ["csrfToken"]
              }
            }
          }
        },
        "responses": {
          "302": {
            "description": "Redirect after successful sign-out"
          },
          "400": {
            "description": "Invalid request or missing CSRF token"
          }
        }
      }
    },
    "/api/auth/session": {
      "get": {
        "summary": "Get session",
        "description": "Returns client-safe session object or empty object if no session",
        "tags": ["auth"],
        "responses": {
          "200": {
            "description": "Session data",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "nullable": true
                            },
                            "email": {
                              "type": "string",
                              "nullable": true
                            },
                            "image": {
                              "type": "string",
                              "nullable": true
                            }
                          }
                        },
                        "expires": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/csrf": {
      "get": {
        "summary": "Get CSRF token",
        "description": "Returns CSRF token required for POST requests to authentication endpoints",
        "tags": ["auth"],
        "responses": {
          "200": {
            "description": "CSRF token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "csrfToken": {
                      "type": "string",
                      "description": "CSRF token for authentication requests"
                    }
                  },
                  "required": ["csrfToken"]
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/providers": {
      "get": {
        "summary": "Get configured providers",
        "description": "Returns list of configured OAuth providers and their details",
        "tags": ["auth"],
        "responses": {
          "200": {
            "description": "List of configured providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "github": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "github"
                        },
                        "name": {
                          "type": "string",
                          "example": "GitHub"
                        },
                        "type": {
                          "type": "string",
                          "example": "oauth"
                        },
                        "signinUrl": {
                          "type": "string",
                          "example": "/api/auth/signin/github"
                        },
                        "callbackUrl": {
                          "type": "string",
                          "example": "/api/auth/callback/github"
                        }
                      },
                      "required": [
                        "id",
                        "name",
                        "type",
                        "signinUrl",
                        "callbackUrl"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PaginatedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          },
          "total": {
            "type": "integer",
            "minimum": 0,
            "example": 42,
            "description": "Total number of items"
          },
          "page": {
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 20,
            "description": "Items per page"
          },
          "totalPages": {
            "type": "integer",
            "minimum": 0,
            "example": 3,
            "description": "Total number of pages"
          },
          "success": {
            "type": "boolean",
            "example": true
          }
        },
        "required": ["data", "total", "page", "limit", "totalPages", "success"],
        "description": "Paginated response wrapper"
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "userId": {
            "$ref": "#/components/schemas/Id"
          },
          "projectId": {
            "$ref": "#/components/schemas/Id"
          },
          "parentTaskId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "type": "null"
              }
            ]
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500,
            "example": "Complete task"
          },
          "description": {
            "type": ["string", "null"],
            "example": "Task description"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "priority": {
            "type": "integer",
            "example": 1,
            "description": "Task priority (higher = more important)"
          },
          "dueDate": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          },
          "completedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          },
          "path": {
            "type": ["string", "null"],
            "example": "/root/subtask"
          },
          "depth": {
            "type": "integer",
            "minimum": 0,
            "example": 0
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "deletedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "id",
          "userId",
          "projectId",
          "title",
          "status",
          "priority",
          "depth",
          "createdAt",
          "updatedAt"
        ],
        "description": "Task entity"
      },
      "Id": {
        "type": "integer",
        "minimum": 1,
        "example": 1,
        "description": "Unique identifier"
      },
      "TaskStatus": {
        "type": "string",
        "enum": ["pending", "in_progress", "completed", "cancelled"],
        "example": "pending",
        "description": "Task status"
      },
      "Timestamp": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "format": "date-time"
          }
        ],
        "example": "2025-01-01T00:00:00Z",
        "description": "ISO timestamp"
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "const": false
          },
          "error": {
            "type": "string",
            "example": "VALIDATION_ERROR"
          },
          "message": {
            "type": "string",
            "example": "Invalid input provided"
          },
          "details": {}
        },
        "required": ["success", "error", "message"],
        "description": "API error response"
      },
      "TaskFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          }
        ],
        "properties": {
          "projectId": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["urgent", "bug"]
          },
          "dueBefore": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "dueAfter": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "search": {
            "type": "string",
            "example": "search term"
          },
          "includeCompleted": {
            "type": "boolean",
            "example": false
          }
        },
        "description": "Task filter parameters"
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "description": "Page number"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "example": 20,
            "description": "Items per page"
          }
        },
        "description": "Pagination parameters"
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean"
              }
            },
            "required": ["success"]
          },
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          }
        },
        "required": ["data", "success"],
        "description": "API response wrapper"
      },
      "CreateTask": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500,
            "example": "Complete task"
          },
          "projectId": {
            "$ref": "#/components/schemas/Id"
          },
          "parentId": {
            "$ref": "#/components/schemas/Id"
          },
          "description": {
            "type": "string",
            "example": "Task description"
          },
          "priority": {
            "type": "integer",
            "example": 1
          },
          "dueDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["urgent", "bug"]
          }
        },
        "required": ["title", "projectId"],
        "description": "Create task request"
      },
      "IdParam": {
        "type": "string",
        "example": "1",
        "description": "Unique identifier as URL parameter"
      },
      "UpdateTask": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 500,
            "example": "Complete task"
          },
          "parentId": {
            "$ref": "#/components/schemas/Id"
          },
          "description": {
            "type": "string",
            "example": "Task description"
          },
          "priority": {
            "type": "integer",
            "example": 1
          },
          "dueDate": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["urgent", "bug"]
          }
        },
        "description": "Update task request"
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "userId": {
            "$ref": "#/components/schemas/Id"
          },
          "parentProjectId": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Id"
              },
              {
                "type": "null"
              }
            ]
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "example": "My Project"
          },
          "description": {
            "type": ["string", "null"],
            "example": "Project description"
          },
          "color": {
            "$ref": "#/components/schemas/Color"
          },
          "path": {
            "type": ["string", "null"],
            "example": "/root/subproject"
          },
          "depth": {
            "type": "integer",
            "minimum": 0,
            "example": 0
          },
          "createdAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/Timestamp"
          },
          "deletedAt": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": ["id", "userId", "name", "depth", "createdAt", "updatedAt"],
        "description": "Project entity"
      },
      "Color": {
        "type": "string",
        "pattern": "^#[0-9A-Fa-f]{6}$",
        "example": "#FF5722",
        "description": "Hex color code"
      },
      "ProjectFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Pagination"
          }
        ],
        "properties": {
          "includeArchived": {
            "type": "boolean",
            "example": false
          },
          "depth": {
            "type": "integer",
            "minimum": 1,
            "example": 1,
            "description": "Maximum depth to include"
          }
        },
        "description": "Project filter parameters"
      },
      "CreateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "example": "My Project"
          },
          "description": {
            "type": "string",
            "example": "Project description"
          },
          "parentId": {
            "$ref": "#/components/schemas/Id"
          },
          "color": {
            "$ref": "#/components/schemas/Color"
          }
        },
        "required": ["name"],
        "description": "Create project request"
      },
      "UpdateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "example": "My Project"
          },
          "description": {
            "type": "string",
            "example": "Project description"
          },
          "parentId": {
            "$ref": "#/components/schemas/Id"
          },
          "color": {
            "$ref": "#/components/schemas/Color"
          }
        },
        "description": "Update project request"
      }
    }
  }
}
