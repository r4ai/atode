/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/health": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Health check endpoint */
    get: operations["getApiHealth"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/tasks": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List tasks
     * @description Get a paginated list of tasks with optional filtering
     */
    get: operations["getApiTasks"]
    put?: never
    /**
     * Create task
     * @description Create a new task
     */
    post: operations["postApiTasks"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/tasks/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get task
     * @description Get a specific task by ID
     */
    get: operations["getApiTasksById"]
    /**
     * Update task
     * @description Update an existing task
     */
    put: operations["putApiTasksById"]
    post?: never
    /**
     * Delete task
     * @description Soft delete a task
     */
    delete: operations["deleteApiTasksById"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/tasks/{id}/complete": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Complete task
     * @description Mark a task as completed
     */
    post: operations["postApiTasksByIdComplete"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/projects": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List projects
     * @description Get a list of user projects with optional filtering
     */
    get: operations["getApiProjects"]
    put?: never
    /**
     * Create project
     * @description Create a new project
     */
    post: operations["postApiProjects"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/projects/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get project
     * @description Get a specific project by ID
     */
    get: operations["getApiProjectsById"]
    /**
     * Update project
     * @description Update an existing project
     */
    put: operations["putApiProjectsById"]
    post?: never
    /**
     * Delete project
     * @description Soft delete a project
     */
    delete: operations["deleteApiProjectsById"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/projects/{id}/children": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get child projects
     * @description Get all child projects of a specific project
     */
    get: operations["getApiProjectsByIdChildren"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/signin": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Display sign-in page
     * @description Displays the built-in/unbranded sign-in page
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Sign-in page */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/html": string
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/signin/github": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Sign in with GitHub
     * @description Starts a GitHub OAuth sign-in flow. Requires CSRF token.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description CSRF token from /api/auth/csrf */
            csrfToken: string
            /** @description URL to redirect to after sign-in */
            callbackUrl?: string
          }
        }
      }
      responses: {
        /** @description Redirect to GitHub OAuth authorization */
        302: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Invalid request or missing CSRF token */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/callback/github": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * GitHub OAuth callback
     * @description Handles OAuth callback from GitHub
     */
    get: {
      parameters: {
        query: {
          /** @description Authorization code from GitHub */
          code: string
          /** @description State parameter for CSRF protection */
          state: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Redirect after successful authentication */
        302: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Invalid callback parameters */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    /**
     * GitHub OAuth callback (POST)
     * @description Handles OAuth callback from GitHub via POST
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description Authorization code from GitHub */
            code: string
            /** @description State parameter for CSRF protection */
            state: string
          }
        }
      }
      responses: {
        /** @description Redirect after successful authentication */
        302: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Invalid callback parameters */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/signout": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Display sign-out page
     * @description Displays the built-in/unbranded sign-out page
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Sign-out page */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "text/html": string
          }
        }
      }
    }
    put?: never
    /**
     * Sign out
     * @description Signs the user out and invalidates the session. Requires CSRF token.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: {
        content: {
          "application/x-www-form-urlencoded": {
            /** @description CSRF token from /api/auth/csrf */
            csrfToken: string
            /** @description URL to redirect to after sign-out */
            callbackUrl?: string
          }
        }
      }
      responses: {
        /** @description Redirect after successful sign-out */
        302: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Invalid request or missing CSRF token */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/session": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get session
     * @description Returns client-safe session object or empty object if no session
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description Session data */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json":
              | {
                  user?: {
                    name?: string | null
                    email?: string | null
                    image?: string | null
                  }
                  /** Format: date-time */
                  expires?: string
                }
              | Record<string, never>
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/csrf": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get CSRF token
     * @description Returns CSRF token required for POST requests to authentication endpoints
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description CSRF token */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": {
              /** @description CSRF token for authentication requests */
              csrfToken: string
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/auth/providers": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get configured providers
     * @description Returns list of configured OAuth providers and their details
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description List of configured providers */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            "application/json": {
              github?: {
                /** @example github */
                id: string
                /** @example GitHub */
                name: string
                /** @example oauth */
                type: string
                /** @example /api/auth/signin/github */
                signinUrl: string
                /** @example /api/auth/callback/github */
                callbackUrl: string
              }
            }
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Paginated response wrapper */
    PaginatedResponse: {
      data: components["schemas"]["Task"][]
      /**
       * @description Total number of items
       * @example 42
       */
      total: number
      /**
       * @description Current page number
       * @example 1
       */
      page: number
      /**
       * @description Items per page
       * @example 20
       */
      limit: number
      /**
       * @description Total number of pages
       * @example 3
       */
      totalPages: number
      /** @example true */
      success: boolean
    }
    /** @description Task entity */
    Task: {
      id: components["schemas"]["Id"]
      userId: components["schemas"]["Id"]
      projectId: components["schemas"]["Id"]
      parentTaskId?: components["schemas"]["Id"] | null
      /** @example Complete task */
      title: string
      /** @example Task description */
      description?: string | null
      status: components["schemas"]["TaskStatus"]
      /**
       * @description Task priority (higher = more important)
       * @example 1
       */
      priority: number
      dueDate?: components["schemas"]["Timestamp"] | null
      completedAt?: components["schemas"]["Timestamp"] | null
      /** @example /root/subtask */
      path?: string | null
      /** @example 0 */
      depth: number
      createdAt: components["schemas"]["Timestamp"]
      updatedAt: components["schemas"]["Timestamp"]
      deletedAt?: components["schemas"]["Timestamp"] | null
    }
    /**
     * @description Unique identifier
     * @example 1
     */
    Id: number
    /**
     * @description Task status
     * @example pending
     * @enum {string}
     */
    TaskStatus: "pending" | "in_progress" | "completed" | "cancelled"
    /**
     * @description ISO timestamp
     * @example 2025-01-01T00:00:00Z
     */
    Timestamp: string
    /** @description API error response */
    ApiError: {
      /** @constant */
      success: false
      /** @example VALIDATION_ERROR */
      error: string
      /** @example Invalid input provided */
      message: string
      details?: unknown
    }
    /** @description Task filter parameters */
    TaskFilter: {
      projectId?: components["schemas"]["Id"]
      status?: components["schemas"]["TaskStatus"]
      /** @example [
       *       "urgent",
       *       "bug"
       *     ] */
      labels?: string[]
      dueBefore?: components["schemas"]["Timestamp"]
      dueAfter?: components["schemas"]["Timestamp"]
      /** @example search term */
      search?: string
      /** @example false */
      includeCompleted?: boolean
    } & components["schemas"]["Pagination"]
    /** @description Pagination parameters */
    Pagination: {
      /**
       * @description Page number
       * @example 1
       */
      page?: number
      /**
       * @description Items per page
       * @example 20
       */
      limit?: number
    }
    /** @description API response wrapper */
    ApiResponse: {
      data: {
        success: boolean
      }
      /** @example true */
      success: boolean
      /** @example Operation completed successfully */
      message?: string
    }
    /** @description Create task request */
    CreateTask: {
      /** @example Complete task */
      title: string
      projectId: components["schemas"]["Id"]
      parentId?: components["schemas"]["Id"]
      /** @example Task description */
      description?: string
      /** @example 1 */
      priority?: number
      dueDate?: components["schemas"]["Timestamp"]
      /** @example [
       *       "urgent",
       *       "bug"
       *     ] */
      labels?: string[]
    }
    /**
     * @description Unique identifier as URL parameter
     * @example 1
     */
    IdParam: string
    /** @description Update task request */
    UpdateTask: {
      /** @example Complete task */
      title?: string
      parentId?: components["schemas"]["Id"]
      /** @example Task description */
      description?: string
      /** @example 1 */
      priority?: number
      dueDate?: components["schemas"]["Timestamp"]
      /** @example [
       *       "urgent",
       *       "bug"
       *     ] */
      labels?: string[]
    }
    /** @description Project entity */
    Project: {
      id: components["schemas"]["Id"]
      userId: components["schemas"]["Id"]
      parentProjectId?: components["schemas"]["Id"] | null
      /** @example My Project */
      name: string
      /** @example Project description */
      description?: string | null
      color?: components["schemas"]["Color"]
      /** @example /root/subproject */
      path?: string | null
      /** @example 0 */
      depth: number
      createdAt: components["schemas"]["Timestamp"]
      updatedAt: components["schemas"]["Timestamp"]
      deletedAt?: components["schemas"]["Timestamp"] | null
    }
    /**
     * @description Hex color code
     * @example #FF5722
     */
    Color: string
    /** @description Project filter parameters */
    ProjectFilter: {
      /** @example false */
      includeArchived?: boolean
      /**
       * @description Maximum depth to include
       * @example 1
       */
      depth?: number
    } & components["schemas"]["Pagination"]
    /** @description Create project request */
    CreateProject: {
      /** @example My Project */
      name: string
      /** @example Project description */
      description?: string
      parentId?: components["schemas"]["Id"]
      color?: components["schemas"]["Color"]
    }
    /** @description Update project request */
    UpdateProject: {
      /** @example My Project */
      name?: string
      /** @example Project description */
      description?: string
      parentId?: components["schemas"]["Id"]
      color?: components["schemas"]["Color"]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type PaginatedResponse = components["schemas"]["PaginatedResponse"]
export type Task = components["schemas"]["Task"]
export type Id = components["schemas"]["Id"]
export type TaskStatus = components["schemas"]["TaskStatus"]
export type Timestamp = components["schemas"]["Timestamp"]
export type ApiError = components["schemas"]["ApiError"]
export type TaskFilter = components["schemas"]["TaskFilter"]
export type Pagination = components["schemas"]["Pagination"]
export type ApiResponse = components["schemas"]["ApiResponse"]
export type CreateTask = components["schemas"]["CreateTask"]
export type IdParam = components["schemas"]["IdParam"]
export type UpdateTask = components["schemas"]["UpdateTask"]
export type Project = components["schemas"]["Project"]
export type Color = components["schemas"]["Color"]
export type ProjectFilter = components["schemas"]["ProjectFilter"]
export type CreateProject = components["schemas"]["CreateProject"]
export type UpdateProject = components["schemas"]["UpdateProject"]
export type $defs = Record<string, never>
export interface operations {
  getApiHealth: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description API is healthy */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @constant */
            status: "ok"
            timestamp: string
            version: string
          }
        }
      }
    }
  }
  getApiTasks: {
    parameters: {
      query?: {
        "#/components/schemas/TaskFilter"?: components["schemas"]["TaskFilter"]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of tasks */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["PaginatedResponse"]
        }
      }
      /** @description Invalid request parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  postApiTasks: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateTask"]
      }
    }
    responses: {
      /** @description Task created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiResponse"]
        }
      }
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  getApiTasksById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components["schemas"]["IdParam"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Task details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiResponse"]
        }
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  putApiTasksById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components["schemas"]["IdParam"]
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateTask"]
      }
    }
    responses: {
      /** @description Task updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiResponse"]
        }
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  deleteApiTasksById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components["schemas"]["IdParam"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Task deleted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiResponse"]
        }
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  postApiTasksByIdComplete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components["schemas"]["IdParam"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Task completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiResponse"]
        }
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  getApiProjects: {
    parameters: {
      query?: {
        "#/components/schemas/ProjectFilter"?: components["schemas"]["ProjectFilter"]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of projects */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            data: components["schemas"]["Project"][]
            success: boolean
          }
        }
      }
      /** @description Invalid request parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  postApiProjects: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateProject"]
      }
    }
    responses: {
      /** @description Project created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiResponse"]
        }
      }
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  getApiProjectsById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components["schemas"]["IdParam"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Project details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiResponse"]
        }
      }
      /** @description Project not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  putApiProjectsById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components["schemas"]["IdParam"]
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateProject"]
      }
    }
    responses: {
      /** @description Project updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiResponse"]
        }
      }
      /** @description Project not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  deleteApiProjectsById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components["schemas"]["IdParam"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Project deleted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiResponse"]
        }
      }
      /** @description Project not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
  getApiProjectsByIdChildren: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: components["schemas"]["IdParam"]
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of child projects */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            data: components["schemas"]["Project"][]
            success: boolean
          }
        }
      }
      /** @description Project not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": components["schemas"]["ApiError"]
        }
      }
    }
  }
}
