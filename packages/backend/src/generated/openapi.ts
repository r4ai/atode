/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/health": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Health check endpoint */
    get: operations["getApiHealth"]
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/tasks": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List tasks
     * @description Get a paginated list of tasks with optional filtering
     */
    get: operations["getApiTasks"]
    put?: never
    /**
     * Create task
     * @description Create a new task
     */
    post: operations["postApiTasks"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/tasks/{id}": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get task
     * @description Get a specific task by ID
     */
    get: operations["getApiTasksById"]
    /**
     * Update task
     * @description Update an existing task
     */
    put: operations["putApiTasksById"]
    post?: never
    /**
     * Delete task
     * @description Soft delete a task
     */
    delete: operations["deleteApiTasksById"]
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  "/api/tasks/{id}/complete": {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Complete task
     * @description Mark a task as completed
     */
    post: operations["postApiTasksByIdComplete"]
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: never
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getApiHealth: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description API is healthy */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @constant */
            status: "ok"
            timestamp: string
            version: string
          }
        }
      }
    }
  }
  getApiTasks: {
    parameters: {
      query?: {
        page?: number
        limit?: number
        projectId?: number
        status?: "pending" | "in_progress" | "completed" | "cancelled"
        labels?: string[]
        dueBefore?: string
        dueAfter?: string
        search?: string
        includeCompleted?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of tasks */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            data: {
              /**
               * @description Unique identifier
               * @example 1
               */
              id: number
              /**
               * @description Unique identifier
               * @example 1
               */
              userId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              projectId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              parentTaskId?: number | null
              /** @example Complete task */
              title: string
              /** @example Task description */
              description?: string | null
              /**
               * @description Task status
               * @example pending
               * @enum {string}
               */
              status: "pending" | "in_progress" | "completed" | "cancelled"
              /**
               * @description Task priority (higher = more important)
               * @example 1
               */
              priority: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              dueDate?: string | null
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              completedAt?: string | null
              /** @example /root/subtask */
              path?: string | null
              /** @example 0 */
              depth: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              createdAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              updatedAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              deletedAt?: string | null
            }[]
            /**
             * @description Total number of items
             * @example 42
             */
            total: number
            /**
             * @description Current page number
             * @example 1
             */
            page: number
            /**
             * @description Items per page
             * @example 20
             */
            limit: number
            /**
             * @description Total number of pages
             * @example 3
             */
            totalPages: number
            /** @example true */
            success: boolean
          }
        }
      }
      /** @description Invalid request parameters */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @constant */
            success: false
            /** @example VALIDATION_ERROR */
            error: string
            /** @example Invalid input provided */
            message: string
            details?: unknown
          }
        }
      }
    }
  }
  postApiTasks: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": {
          /** @example Complete task */
          title: string
          /**
           * @description Unique identifier
           * @example 1
           */
          projectId: number
          /**
           * @description Unique identifier
           * @example 1
           */
          parentId?: number
          /** @example Task description */
          description?: string
          /** @example 1 */
          priority?: number
          /**
           * @description ISO timestamp
           * @example 2025-01-01T00:00:00Z
           */
          dueDate?: string
          /** @example [
           *       "urgent",
           *       "bug"
           *     ] */
          labels?: string[]
        }
      }
    }
    responses: {
      /** @description Task created successfully */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description Task entity */
            data: {
              /**
               * @description Unique identifier
               * @example 1
               */
              id: number
              /**
               * @description Unique identifier
               * @example 1
               */
              userId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              projectId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              parentTaskId?: number | null
              /** @example Complete task */
              title: string
              /** @example Task description */
              description?: string | null
              /**
               * @description Task status
               * @example pending
               * @enum {string}
               */
              status: "pending" | "in_progress" | "completed" | "cancelled"
              /**
               * @description Task priority (higher = more important)
               * @example 1
               */
              priority: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              dueDate?: string | null
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              completedAt?: string | null
              /** @example /root/subtask */
              path?: string | null
              /** @example 0 */
              depth: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              createdAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              updatedAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              deletedAt?: string | null
            }
            /** @example true */
            success: boolean
            /** @example Operation completed successfully */
            message?: string
          }
        }
      }
      /** @description Invalid request data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @constant */
            success: false
            /** @example VALIDATION_ERROR */
            error: string
            /** @example Invalid input provided */
            message: string
            details?: unknown
          }
        }
      }
    }
  }
  getApiTasksById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Task details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description Task entity */
            data: {
              /**
               * @description Unique identifier
               * @example 1
               */
              id: number
              /**
               * @description Unique identifier
               * @example 1
               */
              userId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              projectId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              parentTaskId?: number | null
              /** @example Complete task */
              title: string
              /** @example Task description */
              description?: string | null
              /**
               * @description Task status
               * @example pending
               * @enum {string}
               */
              status: "pending" | "in_progress" | "completed" | "cancelled"
              /**
               * @description Task priority (higher = more important)
               * @example 1
               */
              priority: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              dueDate?: string | null
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              completedAt?: string | null
              /** @example /root/subtask */
              path?: string | null
              /** @example 0 */
              depth: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              createdAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              updatedAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              deletedAt?: string | null
            }
            /** @example true */
            success: boolean
            /** @example Operation completed successfully */
            message?: string
          }
        }
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @constant */
            success: false
            /** @example VALIDATION_ERROR */
            error: string
            /** @example Invalid input provided */
            message: string
            details?: unknown
          }
        }
      }
    }
  }
  putApiTasksById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        "application/json": {
          /** @example Complete task */
          title?: string
          /**
           * @description Unique identifier
           * @example 1
           */
          parentId?: number
          /** @example Task description */
          description?: string
          /** @example 1 */
          priority?: number
          /**
           * @description ISO timestamp
           * @example 2025-01-01T00:00:00Z
           */
          dueDate?: string
          /** @example [
           *       "urgent",
           *       "bug"
           *     ] */
          labels?: string[]
        }
      }
    }
    responses: {
      /** @description Task updated successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description Task entity */
            data: {
              /**
               * @description Unique identifier
               * @example 1
               */
              id: number
              /**
               * @description Unique identifier
               * @example 1
               */
              userId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              projectId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              parentTaskId?: number | null
              /** @example Complete task */
              title: string
              /** @example Task description */
              description?: string | null
              /**
               * @description Task status
               * @example pending
               * @enum {string}
               */
              status: "pending" | "in_progress" | "completed" | "cancelled"
              /**
               * @description Task priority (higher = more important)
               * @example 1
               */
              priority: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              dueDate?: string | null
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              completedAt?: string | null
              /** @example /root/subtask */
              path?: string | null
              /** @example 0 */
              depth: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              createdAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              updatedAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              deletedAt?: string | null
            }
            /** @example true */
            success: boolean
            /** @example Operation completed successfully */
            message?: string
          }
        }
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @constant */
            success: false
            /** @example VALIDATION_ERROR */
            error: string
            /** @example Invalid input provided */
            message: string
            details?: unknown
          }
        }
      }
    }
  }
  deleteApiTasksById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Task deleted successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            data: {
              success: boolean
            }
            /** @example true */
            success: boolean
            /** @example Operation completed successfully */
            message?: string
          }
        }
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @constant */
            success: false
            /** @example VALIDATION_ERROR */
            error: string
            /** @example Invalid input provided */
            message: string
            details?: unknown
          }
        }
      }
    }
  }
  postApiTasksByIdComplete: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Task completed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @description Task entity */
            data: {
              /**
               * @description Unique identifier
               * @example 1
               */
              id: number
              /**
               * @description Unique identifier
               * @example 1
               */
              userId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              projectId: number
              /**
               * @description Unique identifier
               * @example 1
               */
              parentTaskId?: number | null
              /** @example Complete task */
              title: string
              /** @example Task description */
              description?: string | null
              /**
               * @description Task status
               * @example pending
               * @enum {string}
               */
              status: "pending" | "in_progress" | "completed" | "cancelled"
              /**
               * @description Task priority (higher = more important)
               * @example 1
               */
              priority: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              dueDate?: string | null
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              completedAt?: string | null
              /** @example /root/subtask */
              path?: string | null
              /** @example 0 */
              depth: number
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              createdAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              updatedAt: string
              /**
               * @description ISO timestamp
               * @example 2025-01-01T00:00:00Z
               */
              deletedAt?: string | null
            }
            /** @example true */
            success: boolean
            /** @example Operation completed successfully */
            message?: string
          }
        }
      }
      /** @description Task not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          "application/json": {
            /** @constant */
            success: false
            /** @example VALIDATION_ERROR */
            error: string
            /** @example Invalid input provided */
            message: string
            details?: unknown
          }
        }
      }
    }
  }
}
