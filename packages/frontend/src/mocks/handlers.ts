/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { HttpResponse, http } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "";
const MAX_ARRAY_LENGTH = 20;

// Map to store counters for each API endpoint
const apiCounters = new Map<string, number>();

const next = (apiKey: string) => {
  let currentCount = apiCounters.get(apiKey) ?? 0;
  if (currentCount === Number.MAX_SAFE_INTEGER - 1) {
    currentCount = 0;
  }
  apiCounters.set(apiKey, currentCount + 1);
  return currentCount;
};

export const handlers = [
  http.get(`${baseURL}/api/health`, async () => {
    const resultArray = [[getGetApiHealth200Response(), { status: 200 }]] as [
      any,
      { status: number },
    ][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/health`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/tasks`, async () => {
    const resultArray = [
      [getGetApiTasks200Response(), { status: 200 }],
      [getGetApiTasks400Response(), { status: 400 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/tasks`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/api/tasks`, async () => {
    const resultArray = [
      [getPostApiTasks201Response(), { status: 201 }],
      [getPostApiTasks400Response(), { status: 400 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`post /api/tasks`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/tasks/:id`, async () => {
    const resultArray = [
      [getGetApiTasksById200Response(), { status: 200 }],
      [getGetApiTasksById404Response(), { status: 404 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/tasks/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/api/tasks/:id`, async () => {
    const resultArray = [
      [getPutApiTasksById200Response(), { status: 200 }],
      [getPutApiTasksById404Response(), { status: 404 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`put /api/tasks/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/api/tasks/:id`, async () => {
    const resultArray = [
      [getDeleteApiTasksById200Response(), { status: 200 }],
      [getDeleteApiTasksById404Response(), { status: 404 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`delete /api/tasks/:id`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/api/tasks/:id/complete`, async () => {
    const resultArray = [
      [getPostApiTasksByIdComplete200Response(), { status: 200 }],
      [getPostApiTasksByIdComplete404Response(), { status: 404 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`post /api/tasks/:id/complete`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/projects`, async () => {
    const resultArray = [
      [getGetApiProjects200Response(), { status: 200 }],
      [getGetApiProjects400Response(), { status: 400 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/projects`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/api/projects`, async () => {
    const resultArray = [
      [getPostApiProjects201Response(), { status: 201 }],
      [getPostApiProjects400Response(), { status: 400 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`post /api/projects`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/projects/:id`, async () => {
    const resultArray = [
      [getGetApiProjectsById200Response(), { status: 200 }],
      [getGetApiProjectsById404Response(), { status: 404 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/projects/:id`) % resultArray.length],
    );
  }),
  http.put(`${baseURL}/api/projects/:id`, async () => {
    const resultArray = [
      [getPutApiProjectsById200Response(), { status: 200 }],
      [getPutApiProjectsById404Response(), { status: 404 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`put /api/projects/:id`) % resultArray.length],
    );
  }),
  http.delete(`${baseURL}/api/projects/:id`, async () => {
    const resultArray = [
      [getDeleteApiProjectsById200Response(), { status: 200 }],
      [getDeleteApiProjectsById404Response(), { status: 404 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`delete /api/projects/:id`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/projects/:id/children`, async () => {
    const resultArray = [
      [getGetApiProjectsByIdChildren200Response(), { status: 200 }],
      [getGetApiProjectsByIdChildren404Response(), { status: 404 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/projects/:id/children`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/auth/signin`, async () => {
    const resultArray = [
      [getGetApiAuthSignin200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/auth/signin`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/api/auth/signin/github`, async () => {
    const resultArray = [
      [undefined, { status: 302 }],
      [undefined, { status: 400 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`post /api/auth/signin/github`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/auth/callback/github`, async () => {
    const resultArray = [
      [undefined, { status: 302 }],
      [undefined, { status: 400 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[
        next(`get /api/auth/callback/github`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/api/auth/callback/github`, async () => {
    const resultArray = [
      [undefined, { status: 302 }],
      [undefined, { status: 400 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[
        next(`post /api/auth/callback/github`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/api/auth/signout`, async () => {
    const resultArray = [
      [getGetApiAuthSignout200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/auth/signout`) % resultArray.length],
    );
  }),
  http.post(`${baseURL}/api/auth/signout`, async () => {
    const resultArray = [
      [undefined, { status: 302 }],
      [undefined, { status: 400 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`post /api/auth/signout`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/auth/session`, async () => {
    const resultArray = [
      [getGetApiAuthSession200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/auth/session`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/auth/csrf`, async () => {
    const resultArray = [[getGetApiAuthCsrf200Response(), { status: 200 }]] as [
      any,
      { status: number },
    ][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/auth/csrf`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/api/auth/providers`, async () => {
    const resultArray = [
      [getGetApiAuthProviders200Response(), { status: 200 }],
    ] as [any, { status: number }][];

    return HttpResponse.json(
      ...resultArray[next(`get /api/auth/providers`) % resultArray.length],
    );
  }),
];

export function getGetApiHealth200Response() {
  return {
    status: faker.lorem.words(),
    timestamp: faker.lorem.words(),
    version: faker.lorem.words(),
  };
}

export function getGetApiTasks200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: 1,
      userId: 1,
      projectId: 1,
      parentTaskId: faker.helpers.arrayElement([1, null]),
      title: "Complete task",
      description: "Task description",
      status: "pending",
      priority: 1,
      dueDate: faker.helpers.arrayElement(["2025-01-01T00:00:00Z", null]),
      completedAt: faker.helpers.arrayElement(["2025-01-01T00:00:00Z", null]),
      path: "/root/subtask",
      depth: faker.number.int(),
      createdAt: "2025-01-01T00:00:00Z",
      updatedAt: "2025-01-01T00:00:00Z",
      deletedAt: faker.helpers.arrayElement(["2025-01-01T00:00:00Z", null]),
    })),
    total: 42,
    page: 1,
    limit: 20,
    totalPages: 3,
    success: true,
  };
}

export function getGetApiTasks400Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getPostApiTasks201Response() {
  return {
    data: {
      success: faker.datatype.boolean(),
    },
    success: true,
    message: "Operation completed successfully",
  };
}

export function getPostApiTasks400Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getGetApiTasksById200Response() {
  return {
    data: {
      success: faker.datatype.boolean(),
    },
    success: true,
    message: "Operation completed successfully",
  };
}

export function getGetApiTasksById404Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getPutApiTasksById200Response() {
  return {
    data: {
      success: faker.datatype.boolean(),
    },
    success: true,
    message: "Operation completed successfully",
  };
}

export function getPutApiTasksById404Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getDeleteApiTasksById200Response() {
  return {
    data: {
      success: faker.datatype.boolean(),
    },
    success: true,
    message: "Operation completed successfully",
  };
}

export function getDeleteApiTasksById404Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getPostApiTasksByIdComplete200Response() {
  return {
    data: {
      success: faker.datatype.boolean(),
    },
    success: true,
    message: "Operation completed successfully",
  };
}

export function getPostApiTasksByIdComplete404Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getGetApiProjects200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: 1,
      userId: 1,
      parentProjectId: faker.helpers.arrayElement([1, null]),
      name: "My Project",
      description: "Project description",
      color: "#FF5722",
      path: "/root/subproject",
      depth: faker.number.int(),
      createdAt: "2025-01-01T00:00:00Z",
      updatedAt: "2025-01-01T00:00:00Z",
      deletedAt: faker.helpers.arrayElement(["2025-01-01T00:00:00Z", null]),
    })),
    success: faker.datatype.boolean(),
  };
}

export function getGetApiProjects400Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getPostApiProjects201Response() {
  return {
    data: {
      success: faker.datatype.boolean(),
    },
    success: true,
    message: "Operation completed successfully",
  };
}

export function getPostApiProjects400Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getGetApiProjectsById200Response() {
  return {
    data: {
      success: faker.datatype.boolean(),
    },
    success: true,
    message: "Operation completed successfully",
  };
}

export function getGetApiProjectsById404Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getPutApiProjectsById200Response() {
  return {
    data: {
      success: faker.datatype.boolean(),
    },
    success: true,
    message: "Operation completed successfully",
  };
}

export function getPutApiProjectsById404Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getDeleteApiProjectsById200Response() {
  return {
    data: {
      success: faker.datatype.boolean(),
    },
    success: true,
    message: "Operation completed successfully",
  };
}

export function getDeleteApiProjectsById404Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getGetApiProjectsByIdChildren200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: 1,
      userId: 1,
      parentProjectId: faker.helpers.arrayElement([1, null]),
      name: "My Project",
      description: "Project description",
      color: "#FF5722",
      path: "/root/subproject",
      depth: faker.number.int(),
      createdAt: "2025-01-01T00:00:00Z",
      updatedAt: "2025-01-01T00:00:00Z",
      deletedAt: faker.helpers.arrayElement(["2025-01-01T00:00:00Z", null]),
    })),
    success: faker.datatype.boolean(),
  };
}

export function getGetApiProjectsByIdChildren404Response() {
  return {
    success: faker.datatype.boolean(),
    error: "VALIDATION_ERROR",
    message: "Invalid input provided",
    details: null,
  };
}

export function getGetApiAuthSignin200Response() {
  return null;
}

export function getGetApiAuthSignout200Response() {
  return null;
}

export function getGetApiAuthSession200Response() {
  return faker.helpers.arrayElement([
    {
      user: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        image: faker.lorem.words(),
      },
      expires: faker.date.past(),
    },
    {},
  ]);
}

export function getGetApiAuthCsrf200Response() {
  return {
    csrfToken: faker.lorem.words(),
  };
}

export function getGetApiAuthProviders200Response() {
  return {
    github: {
      id: "github",
      name: "GitHub",
      type: "oauth",
      signinUrl: "/api/auth/signin/github",
      callbackUrl: "/api/auth/callback/github",
    },
  };
}
